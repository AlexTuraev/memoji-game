// –§—É–Ω–∫—Ü–∏—è mainScript - –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å–∫—Ä–∏–ø—Ç–æ–º –∏–∑ HTML
/* –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: countRow-–∫–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è, 
              countCol-–∫–æ–ª-–≤–æ –∫–æ–ª–æ–Ω–æ–∫ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è,
              idSection - id —Å–µ–∫—Ü–∏–∏, –≥–¥–µ —Ä–∞–∑–º–µ—â–∞–µ—Ç—é—Ç—Å—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
              cardObj = {cssWrapper-—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π HTML-—ç–ª-—Ç –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏, 
                        cssWrapperTurnOpen - –∫–ª–∞—Å—Å CSS –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ,	
                        cssCard - CSS –∫–ª–∞—Å—Å –æ–±—â–∏–π –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–π –∏ –Ω–∏–∂–Ω–µ–π —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä—Ç–æ—á–∫–∏,
						cssCloseCard - CSS –∫–ª–∞—Å—Å –∑–∞–∫—Ä—ã—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
						cssOpenCard - CSS –∫–ª–∞—Å—Å –æ—Ç–∫—Ä—ã—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Å–∏–º–≤–æ–ª–æ–º emoji
				}
              idTimer - id —Ç–∞–π–º–µ—Ä–∞ Timer
              htmlModalObj - –æ–±—ä–µ–∫—Ç —Å ID –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ –∫–∞–∫ —Ä–µ–∑-—Ç –∏–≥—Ä—ã)
*/
function mainScript({countRow, countCol, idSection, cardObj, idTimer, htmlModalObj})
{
	/*üê∂ üê± üê≠ üêπ üê∞ üêº*/
	cardSymbols = ['&#128054;', '&#128049;', '&#128045;', '&#128057;', '&#128048;', '&#128060;', '&#128054;', '&#128049;', '&#128045;', '&#128057;', '&#128048;', '&#128060;']; // —Å–∏–º–≤–æ–ª—ã-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
	let section = document.getElementById(idSection); // –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç HTML, –∫—É–¥–∞ —Ä–∞–∑–º–µ—â–∞—Ç—å –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
	const modalWindow = document.getElementById(htmlModalObj.idModal); // –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–¥—É–ª—å–Ω–æ–µ –æ–∫–Ω–æ
	const modalWin = document.getElementById(htmlModalObj.idWin); // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª-—Ç DIV Win
	const modalLose = document.getElementById(htmlModalObj.idLose); // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª-—Ç DIV Lose
	const btnPlayAgain = document.getElementById(htmlModalObj.idBtnPlayAgain); // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É Play Again
	const btnTryAgain = document.getElementById(htmlModalObj.idBtnTryAgain); // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É Try Again

	let arrayCards = []; // –º–∞—Å—Å–∏–≤ —Ö—Ä–∞–Ω–∏—Ç –æ–±—ä–µ–∫—Ç—ã –∫–∞—Ä—Ç–æ—á–µ–∫
	let gameObject = null; // –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ ClassGame
	let timerObj = null; // –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ ClassTimer
	let GAME_TIME = 60000; // –∫–æ–ª-–≤–æ –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
	let isFirstGame = true; // –ø—Ä–∏–∑–Ω–∞–∫ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã, —Å—Ç–∞—Ä—Ç 1-–π –∏–≥—Ä—ã


    // class ClassCard - –∫–ª–∞—Å—Å –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ {card, emoji - —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ—Ç–≤. DOM-—ç–ª–µ–º–µ–Ω—Ç—ã, status-—Å—Ç–∞—Ç—É—Å –∫–∞—Ä—Ç–æ—á–∫–∏, redraw-"–ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞" –ø—É—Ç–µ–º –∑–∞–º–µ–Ω—ã –∫–ª–∞—Å—Å–æ–≤ CSS}
    class ClassCard	{
    	constructor (card, emoji, symbolEmoji){
    		this.card = card;                        // —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç HTML –∫–∞—Ä—Ç–æ—á–∫–∏
    		this.emoji = emoji;                      // —Å—Å—ã–ª–∫–∞ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç HTML, –ø–æ—Ç–æ–º–æ–∫, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –æ—Ç–∫—Ä—ã—Ç—É—é —Å—Ç–æ—Ä–æ–Ω—É –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Å–∏–º–≤–æ–ª–æ–º emoji
    		this.status = 0;                         // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ (0-–∑–∞–∫—Ä—ã—Ç–∞, 1-–æ—Ç–∫—Ä—ã—Ç–∞, 2-—Å–æ–≤–ø–∞–¥–∞—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞, 3-missed)
    		this.symbolEmoji = symbolEmoji;          // –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ emoji, –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ –∑–∞ –∫–∞—Ä—Ç–æ—á–∫–æ–π
    	}
    	redraw(){            // –º–µ—Ç–æ–¥ "–ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏" –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ status'—É
    		let card = this.card; let emoji = this.emoji;

    		switch (this.status){
    			case 0: 
    			    card.classList.remove(cardObj.cssWrapperTurnOpen);
    			    break;
    			case 1: 
    				card.classList.toggle(cardObj.cssWrapperTurnOpen, true);
    				emoji.classList.remove(cardObj.cssCardMissed, cardObj.cssCardMatched);
    				break;
    			case 2: 
    				card.classList.toggle(cardObj.cssWrapperTurnOpen, true);
    				emoji.classList.remove(cardObj.cssCardMissed);
    				emoji.classList.toggle(cardObj.cssCardMatched, true);
    				break;
    			case 3: 
    				card.classList.toggle(cardObj.cssWrapperTurnOpen, true);
    				emoji.classList.remove(cardObj.cssCardMatched);
    				emoji.classList.toggle(cardObj.cssCardMissed, true);
    				break;
    		}
    		return null;
    	}
    }
    

    // ----------------------------
    // class Game - –∫–ª–∞—Å—Å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–∏–∫–∏ –∏–≥—Ä—ã
    class ClassGame {
    	constructor(){
    		this.testedCards = []; // —Å—é–¥–∞ —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    		this.redCards = [];    // missed cards (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ)
    		this.nonResult = countRow*countCol / 2;       // –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –∫–æ–ª-–≤–æ –Ω–µ—É–≥–∞–¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç = (countRow*countCol / 2), 3*4/2 = 6, —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ —É–≥–∞–¥—ã–≤–∞–Ω–∏–∏ –Ω–∞ 1
    		this.isGameStart = false; // false - –∏–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å, true - –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å
    	}
    	startGame(card){
    		if (!this.isGameStart){
    			this.isGameStart = true; // –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –Ω–∞–∂–∞—Ç–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
    		}

    		let testedCards  = this.testedCards;
    		let redCards = this.redCards;
    		
    		if (card.status >= 2) // ==2 –∏–ª–∏ ==3, –æ—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ –±–µ–∑ –∏–∑–º-–π, –∑–µ–ª–µ–Ω–∞—è –∏–ª–∏ –∏–∫—Ä–∞—Å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
    			return null;

    		// +++++++++++++
    		// –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–µ, –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —ç—Ç–æ–π –æ–ø—Ü–∏–∏, –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—ã—à–µ if (card.status >= 2) –Ω–∞ if (card.status >= 1) –∏ –º–æ–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –±–ª–æ–∫
    		if (card.status === 1){
    			card.status = 0;
    			card.redraw();
    			testedCards.length = 0;
    			return null;
    		}
    		// +++++++++++++

    		// –µ—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –≤ –º–æ–º–µ–Ω—Ç –∫–ª–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞
    		if (card.status === 0){
    			testedCards.push(card);
    			
    			// –æ—á–∏—Å—Ç–∫–∞ –∫—Ä–∞—Å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ (–ø–µ—Ä–µ–≤–æ–¥ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
    			if (redCards.length == 2){
    				redCards.forEach(function(elem){
    					elem.status = 0;
    					elem.redraw();
    				});
    				redCards.length = 0;
    			}

    			if (testedCards.length === 1){
    				card.status = 1;
    				card.redraw();
    				return null;
    			}

    			else if (testedCards.length === 2){ // –∫–æ–ª-–≤–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã—Ö –∫–∞—Ä—Ç==2
    				if (testedCards[0].symbolEmoji.toString() === testedCards[1].symbolEmoji.toString()){
    					testedCards.forEach(function(elem){
    						elem.status = 2; // —Å–æ–≤–ø–∞–ª–∏ (matched)
    						elem.redraw();
    					});
    					this.nonResult--; // —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª-–≤–æ –Ω–µ—É–≥–∞–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä –Ω–∞ 1
    					
    					if (this.nonResult === 0) {
    						//console.log('–ü–æ–±–µ–¥–∞'); 
    						return 1; // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1 –≤ —Å–ª—É—á–∞–µ –ü–æ–±–µ–¥—ã WIN
    					}
    				}
    				else {
    					//redCards = testedCards.slice(0); // –∫–æ–ø–∏—Ä—É–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –Ω–µ—Å–æ–≤–ø–∞–≤—à–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    					for(let i=0; i<testedCards.length; i++) redCards.push(testedCards[i]);

    					testedCards.forEach(function(elem){
    						elem.status = 3; // –Ω–µ —Å–æ–≤–ø–∞–ª–∏ (missed)
    						elem.redraw();
    					});
    				}
    				
    				testedCards.length = 0;
    				return null;
    			}
    		}
    	} // startGame()

    }
    
    // ----------------------------
    /* –ö–ª–∞—Å—Å –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ */
    class ClassTimer{
    	constructor(id, maxTime = 60000){
    		this.elTimer = document.getElementById(id);   // –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å —Å–æ–æ—Ç–≤-–º HTML-—ç–ª–µ–º–µ–Ω—Ç–æ–º
    		this.limitTime = maxTime;                     // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –∏–≥—Ä—É 60000ms –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    		this.currentTimeMS = maxTime;                   // —Ç–µ–∫—É—â–µ–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –º–∞–∫—Å –≤—Ä–µ–º—è –Ω–∞ –∏–≥—Ä—É)
    		this.intervalID = null;                       // —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id —Ç–∞–π–º–µ—Ä–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π setInterval()
    		this.timerReady = true;						  // —Ç–∞–π–º–µ—Ä –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É true, –Ω–µ –≥–æ—Ç–æ–≤ - false
    	}
    	
    	// –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
    	startTimer(){
    		this.intervalID = setInterval(function(){
    			this.currentTimeMS -= 1000;
    			this.displayCurrentTime();
    		}.bind(this), 1000);
    	}

    	// –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞
    	stopTimer(){
    		clearInterval(this.intervalID); // –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ, —Ç–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    		this.intervalID = null;
    	}

    	// –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ–∫—É–Ω–¥ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ HTML –∞—Ä–≥—É–º–µ–Ω—Ç–∞ elTimer
    	displayCurrentTime(){
    		if(this.currentTimeMS === 0){
    			this.stopTimer();

    			/* –í–´–í–û–î –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê */
    			modalWindow.classList.toggle(htmlModalObj.cssVisibleClass, true);
    			modalLose.classList.toggle(htmlModalObj.cssVisibleClass, true);
    			btnTryAgain.classList.toggle(htmlModalObj.cssVisibleClass, true);
    		}

    		let countSeconds = this.currentTimeMS / 1000; // –æ—Å—Ç–∞–≤—à–µ–µ—Å—è —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥
    		let viewMinutes = Math.floor(countSeconds / 60); // —á–∏—Å–ª–æ –º–∏–Ω—É—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    		let viewSeconds = countSeconds % 60;             // —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

    		if (viewMinutes < 10) 
    			viewMinutes = '0' + viewMinutes.toString();
    		if (viewSeconds < 10) 
    			viewSeconds = '0' + viewSeconds.toString();

    		this.elTimer.innerHTML = viewMinutes.toString() + ' : ' + viewSeconds.toString();
    	}
    }

   // -----------------------------------------------------------------------------------------------------
   // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç HTML
   /* –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
   				tag-—Ç–µ–≥ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ HTML
   				classTag - –º–∞—Å—Å–∏–≤ –∫–ª–∞—Å—Å–æ–≤ CSS –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ tag (–í–ù–ò–ú–ê–ù–ò–ï! –ü–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∏–º–µ–Ω–Ω–æ –º–∞—Å—Å–∏–≤ –∫–ª–∞—Å—Å–æ–≤ (–æ—Ñ–æ—Ä–º–ª—è—Ç—å –∫–∞–∫ –º–∞—Å—Å–∏–≤ []), –¥–∞–∂–µ –µ—Å–ª–∏ –∫–ª–∞—Å—Å –≤—Å–µ–≥–æ 1)
   	  –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: —Ç—Ä–µ–±—É–µ–º—ã–π –Ω–∞–º HTML —ç–ª–µ–º–µ–Ω—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏
   */
    function addCard(tag, classTags){
    	let elem = document.createElement(tag);

    	if (classTags !== undefined)
    		for(let i=0; i<classTags.length; i++){
    			elem.classList.add(classTags[i]);
    		}
    	
    	return elem;
    }
    // -----------------------------------------------------------------------------------------------------
    			
    			// –û–°–ù–û–í–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Å–∏–º–≤–æ–ª –∏–∑ –Ω–∞–±–æ—Ä–∞
    function rndSymbol(arrSymbs){
    	let n = Math.floor(Math.random() * arrSymbs.length);
    	return arrSymbs.splice(n,1);  // –≤–æ–∑–≤—Ä–∞—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ emoji, —Å —É–º–µ–Ω—å—à–µ–Ω–∏–µ–º –º–∞—Å—Å–∏–≤–∞ arrSymbs
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –∏–∑ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–∞–∑–º–µ—Ä–æ–º countRow x countCol
    function gameCreateRestart(){
    		// –£ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏ –µ–≥–æ —Å–æ–æ—Ç–≤-—Ö —ç–ª-–≤ —É–±–∏—Ä–∞–µ–º –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–ª–∞—Å—Å CSS –≤–∏–¥–∏–º–æ—Å—Ç–∏
    	modalWindow.classList.toggle(htmlModalObj.cssVisibleClass, false); // —É–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å CSS –≤–∏–¥–∏–º–æ—Å—Ç–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    	modalWin.classList.toggle(htmlModalObj.cssVisibleClass, false); // —É–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å CSS –≤–∏–¥–∏–º–æ—Å—Ç–∏ Win
    	modalLose.classList.toggle(htmlModalObj.cssVisibleClass, false); // —É–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å CSS –≤–∏–¥–∏–º–æ—Å—Ç–∏ Lose
    	btnPlayAgain.classList.toggle(htmlModalObj.cssVisibleClass, false); // —É–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å CSS –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ Play again
    	btnTryAgain.classList.toggle(htmlModalObj.cssVisibleClass, false); // —É–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å CSS –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ Try again
    		// –£ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏ –µ–≥–æ —Å–æ–æ—Ç–≤-—Ö —ç–ª-–≤ —É–±–∏—Ä–∞–µ–º –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–ª–∞—Å—Å CSS –≤–∏–¥–∏–º–æ—Å—Ç–∏

    	gameObject = new ClassGame(); // —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ ClassGame
    	timerObj = new ClassTimer(idTimer, GAME_TIME); // —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∫–ª–∞—Å—Å–∞ ClassTimer
    	timerObj.displayCurrentTime(); // –±–µ–∑ –æ—Ç—Å—á–µ—Ç–∞, –æ—Ç—Å—á–µ—Ç —Å—Ç–∞—Ä—Ç—É–µ—Ç —Å –æ—Ç–∫—Ä—ã—Ç–∏–µ –º1-–π –∫–∞—Ä—Ç–æ—á–∫–∏
    	let symbols = cardSymbols.slice(); // –∫–æ–ø–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫, –ø–æ—Å–∫–æ–ª—å–∫—É –∫–∞–∂–¥—ã–π —Ä–∞–∑ –º—ã –µ–≥–æ –º–µ–Ω—è–µ–º ,–∏—Å—Ö-–π –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å

    	if(isFirstGame){ // –ï—Å–ª–∏ –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑, —Ç–æ —Å–æ–∑–¥–∞–µ–º –≤—Å–µ —ç–ª-—Ç—ã –ø–æ–ª—è

    		for (let i=0; i<countRow; i++){
    			for(let j=0; j<countCol; j++){
    				let cardWrapper = addCard('DIV', [cardObj.cssWrapper]);
    				let elEmoji = addCard('DIV',[cardObj.cssCard, cardObj.cssOpenCard]); // —Å–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–∏–º–≤–æ–ª emoji –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
    				let elCard = addCard('DIV', [cardObj.cssCard, cardObj.cssCloseCard]); // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ DIV –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∫–ª–∞—Å—Å–∞–º–∏                        

					let symbolEmoji = rndSymbol(symbols);
					elEmoji.innerHTML = symbolEmoji;

					cardWrapper.appendChild(elEmoji);                 // –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ç–æ–º–æ–∫ elEmoji –≤ –∫–∞—Ä—Ç–æ—á–∫—É elCard
					cardWrapper.appendChild(elCard); 

					elCard.dataset.index = String(i*countCol+j);  // –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏), —á—Ç–æ–±—ã –ø—Ä–∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –∑–Ω–∞—Ç—å, –≥–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ —Å–æ–±—ã—Ç–∏–µ
					elEmoji.dataset.index = String(i*countCol+j);
					cardWrapper.dataset.index = String(i*countCol+j);

					section.appendChild(cardWrapper);       // –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ —Å–µ–∫—Ü–∏—é HTML section
					
					arrayCards[i*countCol+j] = new ClassCard(cardWrapper, elEmoji, symbolEmoji);
				} // for(j)
			} // for(i)

			isFirstGame = false;
		}
		else{
			/* –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑, —Ç–æ —ç–ª-—Ç—ã –∑–∞–Ω–æ–≤–æ –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è (—Ç.–µ. –±–µ–∑ reflow(!)), –∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–∞—é—Ç—Å—è –Ω–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ "–ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞—é—Ç—Å—è" –∫–∞—Ä—Ç–æ—á–∫–∏ (—Å–º–µ–Ω–∞ –∫–ª–∞—Å—Å–∞ CSS) */
			arrayCards.forEach(function(element){
				element.status = 0; // —Å—Ç–∞—Ç—É—Å –∑–∞–∫—Ä—ã—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
				element.symbolEmoji = element.emoji.innerHTML = rndSymbol(symbols); // –Ω–∞–∑–Ω–∞—á–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
				element.redraw(); // —Å–º–µ–Ω–∞ CSS –∫–ª–∞—Å—Å–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π —Ç–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏
			});
		}

	} // EndOf gameCreateRestart()
	
	gameCreateRestart();





	// -----------------------------------------------------------------------------------------------------
	// –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ click'–∞ –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è click –Ω–∞ section —Å id=idSection)
	section.addEventListener('click', function(event){
		handlerClickCard(event); // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
	});

    
    // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è 'click' –Ω–∞ —Å–µ–∫—Ü–∏–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è id=idSection
    function handlerClickCard(event){
    	event.stopPropagation();

    	if (event.target.tagName !== 'DIV') {
    		return null;   // –Ω–∞–∂–∞—Ç–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –Ω–∞ –ø–æ–ª–µ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ => –≤—ã—Ö–æ–¥ –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    	}
    				
		if (gameObject.startGame(arrayCards[event.target.dataset.index]) === 1) // –≤—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–≥—Ä–æ–≤–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏, –≤ —Å–ª—É—á–∞–µ –ø–æ–±–µ–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1
		{
			modalWindow.classList.toggle(htmlModalObj.cssVisibleClass, true); // –≤—ã–≤–æ–¥ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    		modalWin.classList.toggle(htmlModalObj.cssVisibleClass, true);    // —Å–æ–æ–±—â–µ–Ω–∏–µ Win —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
			btnPlayAgain.classList.toggle(htmlModalObj.cssVisibleClass, true);			  // –∫–Ω–æ–ø–∫–∞ Play again

    		timerObj.stopTimer();                                             // –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞
    		return null;
		}

		if (gameObject.isGameStart && timerObj.timerReady){  // –∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞, –µ—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ isGameStart===true && —Ç–∞–π–º–µ—Ä –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É timerObj.timerReady == true
			timerObj.startTimer();
			timerObj.timerReady = false; // —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º—É –∑–∞–ø—É—Å–∫—É
		}

    	return null;
    }
    // -----------------------------------------------------------------------------------------------------
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ 'click' –Ω–∞ –∫–Ω–æ–ø–∫–µ Play Again (–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã –∑–∞–Ω–æ–≤–æ)
    btnPlayAgain.addEventListener('click', function(event){
    	gameCreateRestart();
    });
	// -----------------------------------------------------------------------------------------------------    
	btnTryAgain.addEventListener('click', function(event){
		gameCreateRestart();
	});
}